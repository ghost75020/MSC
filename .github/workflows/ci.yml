---
name: CI/CD Wazuh SOC Pipeline
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
jobs:
  lint:
    name: Lint Code
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install linters
        run: pip3 install "ansible-core==2.17.*" "ansible-lint==6.22.2"
      - name: Run ansible-lint (PR from Fork)
        if: github.event_name == 'pull_request'
        run: ansible-lint -i .ci_inventory
      - name: Run ansible-lint (Internal Push)
        if: github.event_name == 'push'
        env:
          ANSIBLE_VAULT_PASSWORD_FILE: ${{ runner.temp }}/vault_pass.txt
        shell: bash -euo pipefail {0}
        run: |
          printf '%s' "${{ secrets.VAULT_PASSWORD }}" > "$ANSIBLE_VAULT_PASSWORD_FILE"
          chmod 600 "$ANSIBLE_VAULT_PASSWORD_FILE"
          ansible-lint -i .ci_inventory
  scan:
    name: Scan for Vulnerabilities
    needs: lint
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Scan Docker images
        run: echo "Scan step placeholder"
  test:
    name: Run Functional Tests
    needs: scan
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run Selenium tests
        run: echo "Test step placeholder"
  deploy:
    name: Deploy to Production
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Activate Python venv and Deploy
        env:
          ANSIBLE_VAULT_PASSWORD_FILE: ${{ runner.temp }}/vault_pass.txt
        shell: bash -euo pipefail {0}
        run: |
          source "$GITHUB_WORKSPACE/ansible_env/bin/activate"
          printf '%s' "${{ secrets.VAULT_PASSWORD }}" > "$ANSIBLE_VAULT_PASSWORD_FILE"
          chmod 600 "$ANSIBLE_VAULT_PASSWORD_FILE"
          ansible-playbook -i ansible/inventories/production.ini ansible/playbooks/deploy.yml --vault-password-file "$ANSIBLE_VAULT_PASSWORD_FILE"
